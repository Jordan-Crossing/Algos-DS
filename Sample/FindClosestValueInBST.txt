// -----------------------------------Edge case----------------------------------- //
// -----------------------------------Sample Inputs and Outputs----------------------------------- //

input=
{
  "tree": {
    "nodes": [
      {"id": "10", "left": "5", "right": "15", "value": 10},
      {"id": "15", "left": "13", "right": "22", "value": 15},
      {"id": "22", "left": null, "right": null, "value": 22},
      {"id": "13", "left": null, "right": "14", "value": 13},
      {"id": "14", "left": null, "right": null, "value": 14},
      {"id": "5", "left": "2", "right": "5-2", "value": 5},
      {"id": "5-2", "left": null, "right": null, "value": 5},
      {"id": "2", "left": "1", "right": null, "value": 2},
      {"id": "1", "left": null, "right": null, "value": 1}
    ],
    "root": "10"
  },
  "target": 12
}

Output = 13


// -----------------------------------Big O CHAT----------------------------------- //



// -----------------------------------APPROACH's----------------------------------- //

Naive =

Best =


// -----------------------------------QUESTION----------------------------------- //

write a function that takes a BST and a target integer value and returns the closest value to
the target value contained in the BST.

only one closest value


// -----------------------------------SUDO CODE----------------------------------- //

def findClosestValueInBst(tree, target):
    return findClosestValueInBstHelper(tree, target, tree.value) 



def findClosestValueInBstHelper(tree, target, closest):
    currentNode = tree 
    while currentNode is not None:
        if abs(target - closest) > abs(target - currentNode.value):
            closest = currentNode.value
        if target < currentNode.value:
            currentNode = currentNode.left
        elif target > currentNode.value:
            currentNode = currentNode.right
        else:
            break
    return closest
    







// -----------------------------------CODE----------------------------------- //

function findClosestValueInBst(tree, target) {
    return findClosestValueInBstHelper(tree, target, tree.value);
}

function findClosestValueInBstHelper(tree, target, closest) {
    let currentNode = tree;
    while (currentNode !== null) {
        if (Math.abs(target - closest) > Math.abs(target - currentNode.value)) {
            closest = currentNode.value;
        }
        if (target < currentNode.value) {
            currentNode = currentNode.left;
        } else if ( target > currentNode.value) {
            currentNode = currentNode.right;
        } else {
            break;
        }
    }
    return closest;
}

// -----------------------------------TESTS----------------------------------- //



// -----------------------------------Reflections----------------------------------- //





